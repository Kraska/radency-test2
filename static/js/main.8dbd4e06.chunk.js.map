{"version":3,"sources":["components/ArchiveNote.tsx","components/EditNote.tsx","components/DeleteNote.tsx","components/NotesTableTr.tsx","actions/actionCreator.ts","constants.js","components/AddNote.tsx","components/NotesTable.tsx","components/SummaryTable.tsx","App.tsx","store.ts","reportWebVitals.ts","reducers/init-data.ts","reducers/notes.ts","reducers/categories.ts","reducers/index.ts","index.tsx"],"names":["ArchiveNote","_ref","note","archiveNote","_useState","useState","_useState2","Object","slicedToArray","show","setShow","handleClose","React","createElement","Fragment","onClick","className","Modal","onHide","Header","closeButton","Title","Body","title","Footer","Button","variant","id","EditNote","categories","updateNote","_useState3","_useState4","setTitle","_useState5","category","_useState6","categoryId","setCategory","_useState7","content","_useState8","setContent","handleSave","objectSpread","react_default","a","Form","Group","Label","Control","type","value","onChange","_ref2","target","onKeyPress","_ref5","code","placeholder","Select","_ref3","values","map","_ref6","key","as","_ref4","rows","DeleteNote","deleteNote","connect","state","ownProps","payload","created","dates","iconName","toLocaleString","EditNote_EditNote","ArchiveNote_ArchiveNote","DeleteNote_DeleteNote","AddNote","addNote","initCategoryId","setCategoryId","notes","date","updateSummary","activeNotes","filter","isActive","useEffect","Table","hover","components_NotesTableTr","AddNote_AddNote","archivedNotes","App","preloadedState","components_NotesTable","components_SummaryTable","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","CATEGORIES","1","2","3","initialState","Date","EMPTY_NOTE","arguments","length","undefined","action","Math","random","toString","substring","concat","toConsumableArray","oldNote","find","item","newState","cat","reduce","accumulator","defineProperty","forEach","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","ReactDOM","createRoot","document","getElementById","render","es","src_App"],"mappings":"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","file":"static/js/main.8dbd4e06.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { Modal, Button } from 'react-bootstrap';\nimport { INote, NoteActionTypes } from '../types.js';\n\n\ntype ArchiveNoteProps = {\n    note: INote,\n    archiveNote: (id:string) => NoteActionTypes,\n}\n\nexport const ArchiveNote = ({ note, archiveNote }: ArchiveNoteProps) => {\n        const [show, setShow] = useState(false);\n\n        const handleClose = () => setShow(false);\n        const handleShow = () => setShow(true);\n\n        const handleArchive = () => {\n            archiveNote(note.id);\n            handleClose();\n        }\n\n        return (\n        <>\n            <div onClick={handleShow}>\n                <i className=\"bi bi-arrow-down-square-fill\"></i>\n            </div>\n\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Archiving Note</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    Are you sure, you want to archive note \"{note.title}\"\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={handleArchive}>\n                        Archive\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>);\n    }","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport { ICategory, INote, NoteActionTypes } from '../types.js';\n// import { DatePicker } from 'react-bootstrap-date-picker';\n\n\ntype ArchiveNoteProps = {\n    note: INote,\n    categories: Record<string, ICategory>,\n    updateNote: (note:INote) => NoteActionTypes,\n}\n\nexport const EditNote = ({ note, categories, updateNote }: ArchiveNoteProps) => {\n\n        const [show, setShow] = useState(false);\n\n        const handleClose = () => setShow(false);\n        const handleShow = () => setShow(true);\n\n        const [title, setTitle] = useState(note.title);\n        const handleTitleChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n            setTitle(value);\n        }\n\n        const [categoryId, setCategory] = useState(note.category.id);\n        const handleCategoryChange = ({ target: { value } }: ChangeEvent<HTMLSelectElement>) => {\n            setCategory(value);\n        }\n\n        const [content, setContent] = useState(note.content);\n        const handleContentChange = ({ target: { value } }: ChangeEvent<HTMLTextAreaElement>) => {\n            setContent(value);\n        }\n\n        const handleSave = () => {\n            updateNote({...note, title, category: categories[categoryId], content});\n            handleClose();\n        }\n        \n        const handleKeyPress = ({ code }: KeyboardEvent<HTMLInputElement>) => {\n            if (code === 'Enter') {\n                handleSave();\n            }\n        }\n\n        return (\n        <>\n            <div onClick={handleShow}>\n                <i className=\"bi bi-pencil-fill\"></i>\n            </div>\n\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Editing Note</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    \n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control \n                            type=\"text\" \n                            value={title}\n                            onChange={handleTitleChange}\n                            onKeyPress={handleKeyPress}\n                            placeholder=\"Note title\" />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Category</Form.Label>\n                        <Form.Select \n                            value={categoryId}\n                            onChange={handleCategoryChange} >\n                            {Object.values(categories)\n                                .map(({id, title}) => (<option key={id} value={id}>{title}</option>))}\n                        </Form.Select>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Content</Form.Label>\n                        <Form.Control \n                            as=\"textarea\" \n                            value={content}\n                            onChange={handleContentChange}\n                            rows={3} />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Date</Form.Label>\n                        {/* <DatePicker value={date} onChange={this.handleChange} /> */}\n                    </Form.Group>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={handleSave}>\n                        Save\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>);\n    }","import { useState } from 'react';\nimport { Modal, Button } from 'react-bootstrap';\nimport { INote, NoteActionTypes } from '../types.js';\n\n\ntype ArchiveNoteProps = {\n    note: INote,\n    deleteNote: (id:string) => NoteActionTypes,\n}\n\nexport const DeleteNote = ({ note, deleteNote }: ArchiveNoteProps) => {\n        const [show, setShow] = useState(false);\n\n        const handleClose = () => setShow(false);\n        const handleShow = () => setShow(true);\n\n        const handleDelete = () => {\n            deleteNote(note.id);\n            handleClose();\n        }\n\n        return (\n        <>\n            <div onClick={handleShow}>\n                <i className=\"bi bi-trash-fill\"></i>\n            </div>\n\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Archiving Note</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    Are you sure, you want to archive note \"{note.title}\"\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={handleDelete}>\n                        Delete\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>);\n    }","import { ArchiveNote } from './ArchiveNote';\nimport { EditNote } from './EditNote';\nimport { INote, ICategory, NoteActionTypes, StateType } from '../types.js';\nimport { DeleteNote } from './DeleteNote';\nimport { connect } from 'react-redux';\nimport { updateNote, archiveNote, deleteNote } from '../actions/actionCreator';\n\ntype NoteTableTrProps = {\n    note: INote,\n    categories: Record<string, ICategory>,\n    updateNote: (note:INote) => NoteActionTypes,\n    archiveNote: (id:string) => NoteActionTypes,\n    deleteNote: (id:string) => NoteActionTypes,\n}\n\nconst NotesTableTr = ({ \n        note, \n        categories, \n        updateNote, \n        archiveNote, \n        deleteNote\n    }: NoteTableTrProps) => {\n\n    const { title, created, category, content, dates } = note;\n\n    // console.log(moment(created).format(\"MMMM DD, YYYY\"));\n\n    return (<tr>\n        <th className=\"icon-coll\">\n            <i className={\"bi \" + category.iconName}></i>\n        </th>\n        <th>{title}</th>\n        <td>{created.toLocaleString()}</td>\n        <td>{category.title}</td>\n        <td>{content}</td>\n        <td>{dates}</td>\n        <td>\n            <EditNote note={note} categories={categories} updateNote={updateNote} />\n        </td>\n        <td>\n            <ArchiveNote note={note} archiveNote={archiveNote} />\n        </td>\n        <td>\n            <DeleteNote note={note} deleteNote={deleteNote} />\n        </td>\n    </tr>);\n}\n\nexport default connect((state: StateType, ownProps: {note: INote}) => ({\n    note: ownProps.note,\n    categories: state.categories,\n  }), { updateNote, archiveNote, deleteNote })(NotesTableTr);","import { ADD_NOTE, ARCHIVE_NOTE, DELETE_NOTE, UPDATE_NOTE, UPDATE_SUMMARY } from '../constants';\nimport { NoteActionTypes, INote, SummaryActionTypes, ICategory } from '../types';\n\n\nexport const addNote = (\n        title:string, \n        category:ICategory, \n        content:string, \n        date?:Date\n    ): NoteActionTypes => ({\n    type: ADD_NOTE, \n    payload: {title, category, content, date}\n});\n\nexport const updateNote = (note:INote): NoteActionTypes => ({\n    type: UPDATE_NOTE, \n    payload: {...note}\n});\n\nexport const archiveNote = (id:string): NoteActionTypes => ({\n    type: ARCHIVE_NOTE, \n    payload: {id}\n});\n\nexport const deleteNote = (id:string): NoteActionTypes => ({\n    type: DELETE_NOTE, \n    payload: {id}\n});\n\n\n\nexport const updateSummary = (notes:INote[]): SummaryActionTypes => ({\n    type: UPDATE_SUMMARY, \n    payload: {notes}\n});","export const ADD_NOTE = 'ADD_NOTE';\nexport const UPDATE_NOTE = 'UPDATE_NOTE';\nexport const ARCHIVE_NOTE = 'ARCHIVE_NOTE';\nexport const DELETE_NOTE = 'DELETE_NOTE';\n\nexport const UPDATE_SUMMARY = 'UPDATE_SUMMARY';\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport { ICategory, NoteActionTypes } from '../types.js';\n\n\ntype AddNoteProps = {\n    categories: Record<string, ICategory>,\n    addNote: (        \n        title:string, \n        category:ICategory, \n        content:string, \n        date?:Date\n    ) => NoteActionTypes,\n}\n\nexport const AddNote = ({ categories, addNote }: AddNoteProps) => {\n\n        const [show, setShow] = useState(false);\n\n        const handleClose = () => setShow(false);\n        const handleShow = () => setShow(true);\n\n        const [title, setTitle] = useState('');\n        const handleTitleChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n            setTitle(value);\n        }\n\n        const initCategoryId = Object.values(categories)[0].id;\n        const [categoryId, setCategoryId] = useState(initCategoryId);\n        const handleCategoryChange = ({ target: { value } }: ChangeEvent<HTMLSelectElement>) => {\n            setCategoryId(value);\n        }\n\n        const [content, setContent] = useState('');\n        const handleContentChange = ({ target: { value } }: ChangeEvent<HTMLTextAreaElement>) => {\n            setContent(value);\n        }\n\n        const handleSave = () => {\n            addNote(title, categories[categoryId], content);\n            handleClose();\n            setTitle('');\n            setCategoryId(initCategoryId);\n            setContent('');\n        }\n        \n        const handleKeyPress = ({ code }: KeyboardEvent<HTMLInputElement>) => {\n            if (code === 'Enter') {\n                handleSave();\n            }\n        }\n\n        return (\n        <>\n            <div className=\"container\">\n                <button \n                    type=\"button\" \n                    onClick={handleShow}\n                    className=\"btn float-end\">\n                        Create Note\n                </button>\n            </div>\n\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Editing Note</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    \n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control \n                            type=\"text\" \n                            value={title}\n                            onChange={handleTitleChange}\n                            onKeyPress={handleKeyPress}\n                            placeholder=\"Note title\" />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Category</Form.Label>\n                        <Form.Select \n                            value={categoryId}\n                            onChange={handleCategoryChange} >\n                            {Object.values(categories)\n                                .map(({id, title}) => (<option key={id} value={id}>{title}</option>))}\n                        </Form.Select>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Content</Form.Label>\n                        <Form.Control \n                            as=\"textarea\" \n                            value={content}\n                            onChange={handleContentChange}\n                            rows={3} />\n                    </Form.Group>\n\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={handleSave}>\n                        Save\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>);\n    }","import NotesTableTr  from './NotesTableTr';\nimport { Table } from 'react-bootstrap';\nimport { INote, ICategory, NoteActionTypes, StateType, SummaryActionTypes } from '../types.js';\nimport { AddNote } from './AddNote';\nimport { connect } from 'react-redux';\nimport { addNote, updateSummary } from '../actions/actionCreator';\nimport { useEffect } from 'react';\n\n\ntype NoteTableProps = {\n    notes: Array<INote>,\n    categories: Record<string, ICategory>,\n    addNote: (\n        title:string, \n        category:ICategory, \n        content:string, \n        date?:Date\n    ) => NoteActionTypes,\n    updateSummary: (notes:INote[]) => SummaryActionTypes,\n}\n\n\nconst NotesTable = ({ notes, categories, addNote, updateSummary}: NoteTableProps) => {\n\n    const activeNotes = notes.filter(({isActive}) => isActive);\n\n    useEffect(() => {\n        updateSummary(notes);\n    }, [notes]);\n\n    return (\n        <div className=\"TableList container\">\n        <Table hover>\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>Name</th>\n                    <th>Created</th>\n                    <th>Category</th>\n                    <th>Content</th>\n                    <th>Dates</th>\n                    <th></th>\n                    <th><i className=\"bi bi-arrow-down-square-fill\"></i></th>\n                    <th><i className=\"bi bi-trash-fill\"></i></th>\n                </tr>\n            </thead>\n            <tbody>\n            {activeNotes.map((note) => (<NotesTableTr key={note.id} note={note} />))}\n            </tbody>\n        </Table>    \n        <AddNote categories={categories} addNote={addNote} />\n        </div>\n    );       \n}\n\nexport default connect((state: StateType) => ({\n    notes: state.notes,\n    categories: state.categories,\n  }), { addNote, updateSummary })(NotesTable);","import { Table } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { ICategory, StateType } from '../types.js';\n\n\ntype CategoriesTableProps = {\n    categories: Record<string, ICategory>,\n}\n\nconst SummaryTable = ({ categories }: CategoriesTableProps) => {\n\n    return (\n        <div className=\"TableList container Summary \">\n            <Table hover>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>Name</th>\n                        <th>Active</th>\n                        <th>Archived</th>\n                    </tr>\n                </thead>\n                <tbody>\n                {Object.values(categories).map(({id, title, iconName, activeNotes, archivedNotes}) => (\n                    <tr key={id}>\n                        <th className=\"icon-coll\">\n                            <i className={\"bi \" + iconName}></i>\n                        </th>\n                        <th>{title}</th>\n                        <td>{activeNotes}</td>\n                        <td>{archivedNotes}</td>\n                    </tr>\n                ))}\n                </tbody>\n            </Table>\n        </div>\n    );       \n}\n\nexport default connect((state: StateType) => ({\n    categories: state.categories,\n  }))(SummaryTable);","import './App.css';\nimport NotesTable from './components/NotesTable';\nimport SummaryTable from './components/SummaryTable';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <section>\n            <NotesTable />\n            <SummaryTable />\n        </section>\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, compose } from 'redux';\nimport rootReducer from './reducers/index';\n\n/* eslint-disable no-underscore-dangle */\nconst composeEnhancers =\n  process.env.NODE_ENV !== 'production' &&\n  typeof window === 'object' &&\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\n/* eslint-enable */\n\nconst configureStore = (preloadedState: any) => (\n  createStore(\n    rootReducer,\n    preloadedState,\n    composeEnhancers(),\n  )\n);\n\nconst store = configureStore({});\n\nexport default store;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ICategory, INote } from \"../types\";\n\nexport const CATEGORIES:Record<string, ICategory> = {\n    '1': {\n      id: '1',\n      title: 'Task',\n      iconName: 'bi-card-list',\n      activeNotes: 2,\n      archivedNotes: 0,\n    },\n    '2': {\n      id: '2',\n      title: 'Random Thought',\n      iconName: 'bi-shuffle',\n      activeNotes: 1,\n      archivedNotes: 0,\n    },\n    '3': {\n      id: '3',\n      title: 'Idea',\n      iconName: 'bi-lightbulb',\n      activeNotes: 2,\n      archivedNotes: 0,\n    },\n}; \n\nexport const NOTES: INote[] = [\n    {\n      id: '1',\n      title: 'Shopping list',\n      created: new Date(),\n      category: CATEGORIES['1'],\n      content: 'Tomatoes, bread, ...',\n      isActive: true,\n    },\n    {\n      id: '2',\n      title: 'The theory of evolution',\n      created: new Date(),\n      category: CATEGORIES['2'],\n      content: '',\n      isActive: true,\n    },\n    {\n      id: '3',\n      title: 'Books list',\n      created: new Date(),\n      category: CATEGORIES['3'],\n      content: '',\n      isActive: true,\n    },\n    {\n      id: '4',\n      title: 'New Future',\n      created: new Date(),\n      category: CATEGORIES['3'],\n      content: '',\n      isActive: true,\n    },\n    {\n      id: '5',\n      title: 'Some Task',\n      created: new Date(),\n      category: CATEGORIES['1'],\n      content: 'some content',\n      isActive: true,\n    },\n];","import { updateSummary } from \"../actions/actionCreator\";\nimport { ADD_NOTE, ARCHIVE_NOTE, DELETE_NOTE, UPDATE_NOTE } from \"../constants\";\nimport { ICategory, INote, NoteActionTypes } from \"../types\";\nimport { NOTES, CATEGORIES } from \"./init-data\";\n\ntype stateNotes = INote[];\n\nconst initialState:stateNotes = NOTES;\n\nconst EMPTY_CATEGORY:ICategory = {\n  id: '0',\n  title: '',\n  iconName: '',\n  activeNotes: 0,\n  archivedNotes: 0,\n};\n\nconst EMPTY_NOTE:INote = {      \n  id: '0',\n  title: '',\n  created: new Date(),\n  category: EMPTY_CATEGORY,\n  content: '',\n  isActive: false,\n};\n\n\nconst notes = (state = initialState, action:NoteActionTypes ): stateNotes => {\n\n  const { type, payload } = action;\n  //console.log('payload', payload);\n  switch (type) {\n    \n    case ADD_NOTE : {\n\n      const note:INote = {\n        id: (Math.random() + 1).toString(36).substring(7), \n        title: payload.title, \n        created: new Date(),\n        category: payload.category,\n        content: payload.content, \n        isActive: true,\n      };\n\n      return [...state, note];\n    }\n\n    case UPDATE_NOTE : {\n\n        const oldNote:INote = state.find(({ id }) => id === payload.id) || EMPTY_NOTE;\n\n        const note:INote = {\n          id: payload.id, \n          title: payload.title, \n          created: oldNote.created,\n          category: payload.category,\n          content: payload.content, \n          isActive: payload.isActive,\n        };\n\n        return state.map(item => item.id === payload.id ? note : item);\n      }\n\n    case ARCHIVE_NOTE : {\n      const { id } = payload;\n      const newState = state.map(note => note.id === id ? {...note, isActive: false} : note);\n      \n      return newState;\n    }\n\n    case DELETE_NOTE : {\n      const { id } = payload;\n      return state.filter(note => note.id !== id);\n    }\n  \n    default:\n      return state;\n  }\n}\n  \n  export default notes;","import { createDocumentRegistry } from \"typescript\";\nimport { UPDATE_SUMMARY } from \"../constants\";\nimport { ICategory, SummaryActionTypes } from \"../types\";\nimport { CATEGORIES } from \"./init-data\";\n\ntype StateCategories = Record<string, ICategory>;\n\n\nconst categories = (state = CATEGORIES, action:SummaryActionTypes ): StateCategories => {\n\n  const { type, payload } = action;\n\n  switch (type) {\n    \n      case UPDATE_SUMMARY : {\n\n        const { notes } = payload;\n\n        const newState:StateCategories = Object.values(state)\n            .map(cat => ({...cat, activeNotes: 0, archivedNotes: 0}))\n            .reduce((accumulator, cat) => ({...accumulator, [cat.id]: cat}), {})\n\n        notes.forEach(({category, isActive}) => {\n          if(isActive) {\n            newState[category.id].activeNotes++;\n          } else {\n            newState[category.id].archivedNotes++;\n          }\n        })\n\n        //console.log('newState', newState);\n        return newState;\n      }\n    \n      default:\n        return state;\n  }\n}\n  \n  export default categories;","import { combineReducers } from 'redux';\nimport notes from './notes';\nimport categories from './categories';\n\nconst rootReducer = combineReducers({ notes, categories });\n\nexport default rootReducer;\nexport type RootState = ReturnType<typeof rootReducer>;","import ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./icons/bootstrap-icons.css\"\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport React from 'react';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}